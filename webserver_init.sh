#!/usr/bin/env bash
set -euo pipefail

# setup_nginx_site.sh
# 用法:
#   sudo ./setup_nginx_site.sh example.com
#
# 说明:
# - 在 /var/www/<domain> 创建网站目录（已存在则跳过）
# - 在 /etc/nginx/sites-enabled/ 写入名为 <domain> 的 nginx 配置文件（若已存在则备份）
# - 校验 nginx 配置（nginx -t），然后执行：
#     sudo certbot --nginx -d <domain> -d www.<domain> --no-redirect
#   按用户要求，脚本会自动运行上面这条 certbot 命令（不额外添加 --non-interactive 或 --agree-tos）

if [ "$#" -ne 1 ]; then
  echo "Usage: $0 <domain>"
  exit 1
fi

DOMAIN="${1,,}"  # 转成小写
TARGET_DIR="/var/www/${DOMAIN}"
SITES_ENABLED_DIR="/etc/nginx/sites-enabled"
TARGET_FILE="${SITES_ENABLED_DIR}/${DOMAIN}"
TIMESTAMP="$(date +%Y%m%d%H%M%S)"

# 简单域名校验
if ! [[ "${DOMAIN}" =~ ^([A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?\.)+[A-Za-z]{2,}$ ]]; then
  echo "Invalid domain name: ${DOMAIN}"
  exit 2
fi

# 建议以 root 或有 sudo 权限的用户运行（写 /var/www 和 /etc/nginx）
if [ "$(id -u)" -ne 0 ]; then
  echo "Warning: it's recommended to run this script as root. Continuing, but certbot/nginx operations may require sudo."
fi

echo "Creating website directory: ${TARGET_DIR} (if not exists)..."
mkdir -p -- "${TARGET_DIR}"
if [ -d "${TARGET_DIR}" ]; then
  chown -R ubuntu "${TARGET_DIR}"
fi
# 如需设置目录所属用户，可取消下面注释并调整为你需要的用户（例如 www-data）
# chown -R www-data:www-data "${TARGET_DIR}"

# 备份已存在的配置文件（如果存在）
if [ -e "${TARGET_FILE}" ]; then
  echo "Found existing nginx site file ${TARGET_FILE}, backing up to ${TARGET_FILE}.bak.${TIMESTAMP}"
  cp -a -- "${TARGET_FILE}" "${TARGET_FILE}.bak.${TIMESTAMP}"
fi

echo "Writing nginx config to ${TARGET_FILE} ..."
cat > "${TARGET_FILE}" <<EOF
##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
        #listen 80 ;
        #listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/${DOMAIN};

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name ${DOMAIN} www.${DOMAIN};

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files \$uri \$uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        #location ~ \\.php\$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/run/php/php7.4-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ \\.ht {
        #       deny all;
        #}

}
#由于certbot会在上一个server自动插入listen 80; 和 listen 443; 所以这里注释掉
# server {
#    listen 80;
#    server_name ${DOMAIN} www.${DOMAIN};
#    return 301 https://\$host\$request_uri;
# }
EOF

chmod 644 "${TARGET_FILE}"
echo "Wrote ${TARGET_FILE} and set permissions to 644."

# 检查 certbot 是否存在
if ! command -v certbot >/dev/null 2>&1; then
  echo "certbot command not found. Please install certbot (e.g., snap install core; snap install --classic certbot) and retry."
  exit 5
fi

# 按用户要求执行 certbot 命令
echo "Running certbot to obtain/renew certificate for ${DOMAIN} and www.${DOMAIN} ..."
echo "Command: sudo certbot --nginx -d ${DOMAIN} -d www.${DOMAIN} --no-redirect"
if sudo certbot --nginx -d "${DOMAIN}" -d "www.${DOMAIN}" --no-redirect; then
  echo "certbot completed successfully."
else
  echo "certbot failed. Check the certbot output for details."
  exit 6
fi

# 检查 nginx 是否存在并测试配置
if ! command -v nginx >/dev/null 2>&1; then
  echo "nginx command not found. Please install nginx before running certbot."
  exit 3
fi

echo "Testing nginx configuration (nginx -t)..."
if ! nginx -t; then
  echo "nginx configuration test failed. Please fix the configuration before requesting certificates."
  exit 4
fi


echo "All done. You can verify certificate files under /etc/letsencrypt/live/${DOMAIN}/"
echo "If needed, reload nginx: nginx -t && systemctl reload nginx"
exit 0